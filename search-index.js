var searchIndex={};
searchIndex["spella"] = {"doc":"GitHub","i":[[0,"algebra","spella","Algebra.",null,null],[0,"structures","spella::algebra","Algebraic structures.",null,null],[8,"AbelianGroup","spella::algebra::structures","An abelian group.",null,null],[8,"AssociativeMagma","","An associative magma.",null,null],[8,"CommutativeMagma","","A commutative magma.",null,null],[8,"Group","","A group.",null,null],[8,"InvertibleMagma","","A magma whose all elements have an inverse element.",null,null],[10,"invert","","Returns an inverse element.",0,[[["self"]],["self"]]],[11,"inverse_op","","Returns `self.op(&rhs.invert())`.",0,[[["self"]],["self"]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",0,[[["self"],["self"]]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",0,[[["self"],["self"]]]],[8,"Magma","","A magma.",null,null],[10,"op","","Performs a binary operation.",1,[[["self"]],["self"]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",1,[[["self"],["self"]]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",1,[[["self"],["self"]]]],[8,"Monoid","","A monoid.",null,null],[8,"Semigroup","","A semigroup.",null,null],[8,"UnitalMagma","","A magma that has an identity element.",null,null],[10,"identity","","Returns an identity element.",2,[[],["self"]]],[0,"byte","spella","Single-byte character/string types.",null,null],[3,"ByteChar","spella::byte","A single-byte character.",null,null],[12,"0","","",3,null],[3,"ParseByteCharError","","An error which can be returned when parsing a `ByteChar`.",null,null],[0,"io","spella","Utilities related to I/O.",null,null],[3,"Scanner","spella::io","Wraps a reader and tokenize its input.",null,null],[11,"new","","Creates a new `Scanner`.",4,[[["r"]],["self"]]],[11,"next","","Returns a next token splitted by whitespaces.",4,[[["self"]],[["result",["str"]],["str"]]]],[11,"parse_next","","Parses a next token splitted by whitespaces, and returns it.",4,[[["self"]],[["result"],["result",["result"]]]]],[0,"sequences","spella","Data structures representing a sequence.",null,null],[0,"cumulative_sum","spella::sequences","A cumulative sum.",null,null],[3,"CumulativeSum","spella::sequences::cumulative_sum","A cumulative sum.",null,null],[11,"len","","Returns the length of the sequence.",5,[[["self"]],["usize"]]],[11,"prefix_fold","","Folds elements in the given prefix range with a monoid's…",5,[[["rangeto",["usize"]],["self"],["usize"]],["m"]]],[11,"get","","Returns an element at the given index.",5,[[["self"],["usize"]],["g"]]],[11,"fold","","Folds elements in the given range with a group's binary…",5,[[["range",["usize"]],["self"],["usize"]],["g"]]],[0,"fenwick_tree","spella::sequences","A fenwick tree (a.k.a. binary indexed tree).",null,null],[3,"FenwickTree","spella::sequences::fenwick_tree","A fenwick tree (a.k.a. binary indexed tree).",null,null],[11,"new","","Creates a new `FenwickTree` of the given length, filled…",6,[[["usize"]],["self"]]],[11,"len","","Returns the length of the sequence.",6,[[["self"]],["usize"]]],[11,"point_append","","Append the given value to an element at the given index…",6,[[["self"],["usize"],["m"]]]],[11,"prefix_fold","","Folds elements in the given prefix range with a monoid's…",6,[[["rangeto",["usize"]],["self"],["usize"]],["m"]]],[11,"get","","Returns an element at the given index.",6,[[["self"],["usize"]],["g"]]],[11,"replace","","Replaces an element at the given index with the given…",6,[[["self"],["usize"],["g"]],["g"]]],[11,"fold","","Folds elements in the given range with a group's binary…",6,[[["range",["usize"]],["self"],["usize"]],["g"]]],[0,"segment_tree","spella::sequences","A segment tree.",null,null],[3,"SegmentTree","spella::sequences::segment_tree","A segment tree.",null,null],[3,"GetMut","","Structure wrapping a mutable refenrece to an element on…",null,null],[11,"new","","Creates a new `SegmentTree` of the given length, filled…",7,[[["usize"]],["self"]]],[11,"len","","Returns the length of the sequence.",7,[[["self"]],["usize"]]],[11,"get","","Returns an element at the given index.",7,[[["self"],["usize"]],["m"]]],[11,"get_mut","","Returns a mutable reference to an element at the given…",7,[[["self"],["usize"]],["getmut"]]],[11,"fold","","Folds elements in the given range with a monoid's binary…",7,[[["range",["usize"]],["self"],["usize"]],["m"]]],[11,"update","","Updates the value using the given function.",8,[[["self"],["f"]]]],[11,"from","spella::byte","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","spella::io","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","spella::sequences::cumulative_sum","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","spella::sequences::fenwick_tree","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","spella::sequences::segment_tree","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"drop","","",8,[[["self"]]]],[11,"from","spella::sequences::fenwick_tree","Creates a new `FenwickTree` from a `Vec`.",6,[[["vec"]],["self"]]],[11,"clone","spella::byte","",3,[[["self"]],["bytechar"]]],[11,"clone","","",9,[[["self"]],["parsebytecharerror"]]],[11,"clone","spella::sequences::cumulative_sum","",5,[[["self"]],["cumulativesum"]]],[11,"clone","spella::sequences::fenwick_tree","",6,[[["self"]],["fenwicktree"]]],[11,"clone","spella::sequences::segment_tree","",7,[[["self"]],["segmenttree"]]],[11,"default","spella::byte","",3,[[],["bytechar"]]],[11,"cmp","","",3,[[["bytechar"],["self"]],["ordering"]]],[11,"eq","","",3,[[["bytechar"],["self"]],["bool"]]],[11,"ne","","",3,[[["bytechar"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["parsebytecharerror"]],["bool"]]],[11,"ne","","",9,[[["self"],["parsebytecharerror"]],["bool"]]],[11,"eq","spella::sequences::cumulative_sum","",5,[[["cumulativesum"],["self"]],["bool"]]],[11,"ne","","",5,[[["cumulativesum"],["self"]],["bool"]]],[11,"eq","spella::sequences::fenwick_tree","",6,[[["self"],["fenwicktree"]],["bool"]]],[11,"ne","","",6,[[["self"],["fenwicktree"]],["bool"]]],[11,"eq","spella::sequences::segment_tree","",7,[[["self"],["segmenttree"]],["bool"]]],[11,"ne","","",7,[[["self"],["segmenttree"]],["bool"]]],[11,"partial_cmp","spella::byte","",3,[[["bytechar"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",3,[[["bytechar"],["self"]],["bool"]]],[11,"le","","",3,[[["bytechar"],["self"]],["bool"]]],[11,"gt","","",3,[[["bytechar"],["self"]],["bool"]]],[11,"ge","","",3,[[["bytechar"],["self"]],["bool"]]],[11,"deref","spella::sequences::segment_tree","",8,[[["self"]],["m"]]],[11,"deref_mut","","",8,[[["self"]],["m"]]],[11,"fmt","spella::byte","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","spella::io","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","spella::sequences::cumulative_sum","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","spella::sequences::fenwick_tree","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","spella::sequences::segment_tree","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","spella::byte","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","spella::sequences::cumulative_sum","",5,[[["self"],["__h"]]]],[11,"hash","spella::sequences::fenwick_tree","",6,[[["self"],["__h"]]]],[11,"hash","spella::sequences::segment_tree","",7,[[["self"],["__h"]]]],[11,"from_iter","spella::sequences::cumulative_sum","Creates a new `CumulativeSum` from an iterator.",5,[[["i"]],["self"]]],[11,"from_iter","spella::sequences::fenwick_tree","Creates a new `FenwickTree` from an iterator.",6,[[["i"]],["self"]]],[11,"from_iter","spella::sequences::segment_tree","",7,[[["i"]],["self"]]],[11,"from_str","spella::byte","",3,[[["str"]],[["bytechar"],["parsebytecharerror"],["result",["bytechar","parsebytecharerror"]]]]],[11,"inverse_op","spella::algebra::structures","Returns `self.op(&rhs.invert())`.",0,[[["self"]],["self"]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",0,[[["self"],["self"]]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",0,[[["self"],["self"]]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",1,[[["self"],["self"]]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",1,[[["self"],["self"]]]]],"p":[[8,"InvertibleMagma"],[8,"Magma"],[8,"UnitalMagma"],[3,"ByteChar"],[3,"Scanner"],[3,"CumulativeSum"],[3,"FenwickTree"],[3,"SegmentTree"],[3,"GetMut"],[3,"ParseByteCharError"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);
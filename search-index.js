var N = null;var searchIndex = {};
searchIndex["spella"]={"doc":"GitHub","items":[[0,"algebra","spella","Algebraic structures.",N,N],[8,"Associative","spella::algebra","A trait for magma which is associative.",N,N],[8,"Commutative","","A trait for magma which is commutative.",N,N],[8,"Group","","A group.",N,N],[8,"Invertible","","A trait for magma whose all elements have an inverse element.",N,N],[10,"invert","","Returns an inverse element.",0,[[["self"]],["self"]]],[11,"inverse_op","","Returns `self.op(&rhs.invert())`.",0,[[["self"],["self"]],["self"]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",0,[[["self"],["self"]]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",0,[[["self"],["self"]]]],[8,"Magma","","A magma.",N,N],[10,"op","","Performs a binary operation.",1,[[["self"],["self"]],["self"]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",1,[[["self"],["self"]]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",1,[[["self"],["self"]]]],[8,"Monoid","","A monoid.",N,N],[8,"Semigroup","","A semigroup.",N,N],[8,"Unital","","A trait for magma which has an identity element.",N,N],[10,"identity","","Returns an identity element.",2,[[],["self"]]],[0,"byte","spella","Single-byte character/string types.",N,N],[3,"ByteChar","spella::byte","A single-byte character.",N,N],[3,"ByteStr","","A single-byte string slice.",N,N],[3,"ByteString","","An owned single-byte string.",N,N],[3,"ParseByteCharError","","An error which can be returned when parsing a `ByteChar`.",N,N],[3,"ParseFromStrError","","An error which can be returned when parsing a value of a type which implements `FromStr`.",N,N],[4,"ParseByteStringError","","An error which can be returned when parsing a `ByteString`.",N,N],[11,"new","","Creates a new `ByteChar` from a byte.",3,[[["u8"]],["self"]]],[11,"into_byte","","Unwraps the byte.",3,[[["self"]],["u8"]]],[11,"from_bytes","","Converts a slice of bytes to a `ByteStr`.",4,N],[11,"from_bytes_mut","","Converts a mutable slice of bytes to a mutable `ByteStr`.",4,N],[11,"from_byte_chars","","Converts a slice of `ByteChar` to a `ByteStr`.",4,N],[11,"from_byte_chars_mut","","Converts a mutable slice of `ByteChar` to a mutable `ByteStr`.",4,N],[11,"as_bytes","","Converts this `ByteStr` to a slice of bytes.",4,N],[11,"as_bytes_mut","","Converts this `ByteStr` to a mutable slice of bytes.",4,N],[11,"into_byte_chars","","Unwraps the vector of `ByteChar`.",5,[[["self"]],["vec",["bytechar"]]]],[11,"as_byte_str","","Converts this `ByteString` to a `ByteStr`.",5,[[["self"]],["bytestr"]]],[11,"as_mut_byte_str","","Converts this `ByteString` to a mutable `ByteStr`.",5,[[["self"]],["bytestr"]]],[8,"FromByteStr","","A trait for types parsing a `ByteStr`.",N,N],[16,"Err","","The type of error which can be returned from parsing.",6,N],[10,"from_byte_str","","Parses a `ByteStr` and returns a value of this type.",6,[[["bytestr"]],["result"]]],[0,"io","spella","Utilities related to I/O.",N,N],[3,"Scanner","spella::io","Wraps a reader and tokenize its input.",N,N],[11,"new","","Creates a new `Scanner`.",7,[[["r"]],["self"]]],[11,"next","","Parses a next token splitted by whitespaces, and returns it.",7,[[["self"]],["result",["result"]]]],[11,"next_byte_str","","Returns a next token splitted by whitespaces.",7,[[["self"]],["result",["bytestr"]]]],[0,"sequences","spella","Data structures representing a sequence.",N,N],[0,"cumulative_sum","spella::sequences","A cumulative sum.",N,N],[3,"CumulativeSum","spella::sequences::cumulative_sum","A cumulative sum.",N,N],[11,"len","","Returns the length of the sequence.",8,[[["self"]],["usize"]]],[11,"prefix_fold","","Folds elements in the given prefix range with a monoid's binary operation.",8,[[["self"],["rangeto",["usize"]]],["m"]]],[11,"get","","Returns an element at the given index.",8,[[["self"],["usize"]],["g"]]],[11,"fold","","Folds elements in the given range with a group's binary operation.",8,[[["self"],["range",["usize"]]],["g"]]],[0,"fenwick_tree","spella::sequences","A fenwick tree (a.k.a. binary indexed tree).",N,N],[3,"FenwickTree","spella::sequences::fenwick_tree","A fenwick tree (a.k.a. binary indexed tree).",N,N],[11,"new","","Creates a new `FenwickTree` of the given length, filled with an identity element.",9,[[["usize"]],["self"]]],[11,"len","","Returns the length of the sequence.",9,[[["self"]],["usize"]]],[11,"point_append","","Append the given value to an element at the given index with a monoid's binary operation.",9,[[["self"],["usize"],["m"]]]],[11,"prefix_fold","","Folds elements in the given prefix range with a monoid's binary operation.",9,[[["self"],["rangeto",["usize"]]],["m"]]],[11,"get","","Returns an element at the given index.",9,[[["self"],["usize"]],["g"]]],[11,"replace","","Replaces an element at the given index with the given value, and returns the old one.",9,[[["self"],["usize"],["g"]],["g"]]],[11,"fold","","Folds elements in the given range with a group's binary operation.",9,[[["self"],["range",["usize"]]],["g"]]],[0,"segment_tree","spella::sequences","A segment tree.",N,N],[3,"SegmentTree","spella::sequences::segment_tree","A segment tree.",N,N],[3,"GetMut","","Structure wrapping a mutable refenrece to an element on `SegmentTree`.",N,N],[11,"new","","Creates a new `SegmentTree` of the given length, filled with an identity element.",10,[[["usize"]],["self"]]],[11,"len","","Returns the length of the sequence.",10,[[["self"]],["usize"]]],[11,"get","","Returns an element at the given index.",10,[[["self"],["usize"]],["m"]]],[11,"get_mut","","Returns a mutable reference to an element at the given index.",10,[[["self"],["usize"]],["getmut"]]],[11,"fold","","Folds elements in the given range with a monoid's binary operation.",10,[[["self"],["range",["usize"]]],["m"]]],[11,"update","","Updates the value using the given function.",11,[[["self"],["f"]]]],[11,"from","spella::byte","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","spella::io","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","spella::sequences::cumulative_sum","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","spella::sequences::fenwick_tree","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","spella::sequences::segment_tree","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from_byte_str","spella::byte","",3,[[["bytestr"]],["result"]]],[11,"from_byte_str","","",5,[[["bytestr"]],["result"]]],[11,"clone","","",3,[[["self"]],["bytechar"]]],[11,"clone","","",5,[[["self"]],["bytestring"]]],[11,"clone","spella::sequences::cumulative_sum","",8,[[["self"]],["cumulativesum"]]],[11,"clone","spella::sequences::fenwick_tree","",9,[[["self"]],["fenwicktree"]]],[11,"clone","spella::sequences::segment_tree","",10,[[["self"]],["segmenttree"]]],[11,"from","spella::byte","",5,[[["vec",["bytechar"]]],["bytestring"]]],[11,"from","spella::sequences::fenwick_tree","Creates a new `FenwickTree` from a `Vec`.",9,[[["vec"]],["self"]]],[11,"drop","spella::sequences::segment_tree","",11,[[["self"]]]],[11,"partial_cmp","spella::byte","",3,[[["self"],["bytechar"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["bytechar"]],["bool"]]],[11,"le","","",3,[[["self"],["bytechar"]],["bool"]]],[11,"gt","","",3,[[["self"],["bytechar"]],["bool"]]],[11,"ge","","",3,[[["self"],["bytechar"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["bytestr"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["bytestr"]],["bool"]]],[11,"le","","",4,[[["self"],["bytestr"]],["bool"]]],[11,"gt","","",4,[[["self"],["bytestr"]],["bool"]]],[11,"ge","","",4,[[["self"],["bytestr"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["bytestring"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["bytestring"]],["bool"]]],[11,"le","","",5,[[["self"],["bytestring"]],["bool"]]],[11,"gt","","",5,[[["self"],["bytestring"]],["bool"]]],[11,"ge","","",5,[[["self"],["bytestring"]],["bool"]]],[11,"to_owned","","",4,[[["self"]],["bytestring"]]],[11,"default","","",3,[[],["bytechar"]]],[11,"default","","",5,[[],["bytestring"]]],[11,"eq","","",3,[[["self"],["bytechar"]],["bool"]]],[11,"ne","","",3,[[["self"],["bytechar"]],["bool"]]],[11,"eq","","",4,[[["self"],["bytestr"]],["bool"]]],[11,"ne","","",4,[[["self"],["bytestr"]],["bool"]]],[11,"eq","","",5,[[["self"],["bytestring"]],["bool"]]],[11,"ne","","",5,[[["self"],["bytestring"]],["bool"]]],[11,"eq","spella::sequences::cumulative_sum","",8,[[["self"],["cumulativesum"]],["bool"]]],[11,"ne","","",8,[[["self"],["cumulativesum"]],["bool"]]],[11,"eq","spella::sequences::fenwick_tree","",9,[[["self"],["fenwicktree"]],["bool"]]],[11,"ne","","",9,[[["self"],["fenwicktree"]],["bool"]]],[11,"eq","spella::sequences::segment_tree","",10,[[["self"],["segmenttree"]],["bool"]]],[11,"ne","","",10,[[["self"],["segmenttree"]],["bool"]]],[11,"cmp","spella::byte","",3,[[["self"],["bytechar"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["bytestr"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["bytestring"]],["ordering"]]],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"hash","","",5,N],[11,"hash","spella::sequences::cumulative_sum","",8,N],[11,"hash","spella::sequences::fenwick_tree","",9,N],[11,"hash","spella::sequences::segment_tree","",10,N],[11,"fmt","spella::byte","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","spella::io","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","spella::sequences::cumulative_sum","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","spella::sequences::fenwick_tree","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","spella::sequences::segment_tree","",10,[[["self"],["formatter"]],["result"]]],[11,"deref","spella::byte","",4,N],[11,"deref","","",5,[[["self"]],["bytestr"]]],[11,"deref","spella::sequences::segment_tree","",11,[[["self"]],["m"]]],[11,"deref_mut","spella::byte","",4,N],[11,"deref_mut","","",5,[[["self"]],["bytestr"]]],[11,"deref_mut","spella::sequences::segment_tree","",11,[[["self"]],["m"]]],[11,"from_iter","spella::sequences::cumulative_sum","Creates a new `CumulativeSum` from an iterator.",8,[[["i"]],["self"]]],[11,"from_iter","spella::sequences::fenwick_tree","Creates a new `FenwickTree` from an iterator.",9,[[["i"]],["self"]]],[11,"from_iter","spella::sequences::segment_tree","",10,[[["i"]],["self"]]],[11,"borrow","spella::byte","",5,[[["self"]],["bytestr"]]],[11,"description","","",12,[[["self"]],["str"]]],[11,"description","","",14,[[["self"]],["str"]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"borrow_mut","","",5,[[["self"]],["bytestr"]]],[11,"inverse_op","spella::algebra","Returns `self.op(&rhs.invert())`.",0,[[["self"],["self"]],["self"]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",0,[[["self"],["self"]]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",0,[[["self"],["self"]]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",1,[[["self"],["self"]]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",1,[[["self"],["self"]]]]],"paths":[[8,"Invertible"],[8,"Magma"],[8,"Unital"],[3,"ByteChar"],[3,"ByteStr"],[3,"ByteString"],[8,"FromByteStr"],[3,"Scanner"],[3,"CumulativeSum"],[3,"FenwickTree"],[3,"SegmentTree"],[3,"GetMut"],[3,"ParseByteCharError"],[3,"ParseFromStrError"],[4,"ParseByteStringError"]]};
initSearch(searchIndex);

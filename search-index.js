var N=null,E="",T="t",U="u",searchIndex={};
var R=["spella","bytechar","bytestr","result","A cumulative sum.","usize","spella::sequences","A fenwick tree (a.k.a. binary indexed tree).","Returns the length of the sequence.","prefix_fold","Folds elements in the given prefix range with a monoid's…","Returns an element at the given index.","Folds elements in the given range with a group's binary…","A segment tree.","spella::byte","to_owned","clone_into","to_string","borrow_mut","try_from","try_into","type_id","string","borrow","typeid","spella::io","spella::sequences::cumulative_sum","spella::sequences::fenwick_tree","spella::sequences::segment_tree","from_byte_str","bytestring","ordering","partial_cmp","cumulativesum","fenwicktree","segmenttree","deref_mut","formatter","from_iter","description","inverse_op","spella::algebra","Returns `self.op(&rhs.invert())`.","inverse_op_assign_right","Assigns `self.inverse_op(rhs)` to `self`.","inverse_op_assign_left","Assigns `lhs.inverse_op(self)` to `self`.","op_assign_right","Assigns `self.op(rhs)` to `self`.","op_assign_left","Assigns `lhs.op(self)` to `self`.","Invertible","ByteChar","ByteString","FromByteStr","CumulativeSum","FenwickTree","SegmentTree","ParseByteCharError","ParseFromStrError","ParseByteStringError"];

searchIndex["spella"]={"doc":"GitHub","i":[[0,"algebra",R[0],"Algebraic structures.",N,N],[8,"Associative",R[41],"A trait for magma which is associative.",N,N],[8,"Commutative",E,"A trait for magma which is commutative.",N,N],[8,"Group",E,"A group.",N,N],[8,R[51],E,"A trait for magma whose all elements have an inverse…",N,N],[10,"invert",E,"Returns an inverse element.",0,[[["self"]],["self"]]],[11,R[40],E,R[42],0,[[["self"]],["self"]]],[11,R[43],E,R[44],0,[[["self"],["self"]]]],[11,R[45],E,R[46],0,[[["self"],["self"]]]],[8,"Magma",E,"A magma.",N,N],[10,"op",E,"Performs a binary operation.",1,[[["self"]],["self"]]],[11,R[47],E,R[48],1,[[["self"],["self"]]]],[11,R[49],E,R[50],1,[[["self"],["self"]]]],[8,"Monoid",E,"A monoid.",N,N],[8,"Semigroup",E,"A semigroup.",N,N],[8,"Unital",E,"A trait for magma which has an identity element.",N,N],[10,"identity",E,"Returns an identity element.",2,[[],["self"]]],[0,"byte",R[0],"Single-byte character/string types.",N,N],[3,R[52],R[14],"A single-byte character.",N,N],[3,"ByteStr",E,"A single-byte string slice.",N,N],[3,R[53],E,"An owned single-byte string.",N,N],[3,R[58],E,"An error which can be returned when parsing a `ByteChar`.",N,N],[3,R[59],E,"An error which can be returned when parsing a value of a…",N,N],[4,R[60],E,"An error which can be returned when parsing a `ByteString`.",N,N],[11,"new",E,"Creates a new `ByteChar` from a byte.",3,[[["u8"]],["self"]]],[11,"into_byte",E,"Unwraps the byte.",3,[[],["u8"]]],[11,"from_bytes",E,"Converts a slice of bytes to a `ByteStr`.",4,[[],["self"]]],[11,"from_bytes_mut",E,"Converts a mutable slice of bytes to a mutable `ByteStr`.",4,[[],["self"]]],[11,"from_byte_chars",E,"Converts a slice of `ByteChar` to a `ByteStr`.",4,[[],["self"]]],[11,"from_byte_chars_mut",E,"Converts a mutable slice of `ByteChar` to a mutable…",4,[[],["self"]]],[11,"as_bytes",E,"Converts this `ByteStr` to a slice of bytes.",4,[[["self"]]]],[11,"as_bytes_mut",E,"Converts this `ByteStr` to a mutable slice of bytes.",4,[[["self"]]]],[11,"into_byte_chars",E,"Unwraps the vector of `ByteChar`.",5,[[],[[R[1]],["vec",[R[1]]]]]],[11,"as_byte_str",E,"Converts this `ByteString` to a `ByteStr`.",5,[[["self"]],[R[2]]]],[11,"as_mut_byte_str",E,"Converts this `ByteString` to a mutable `ByteStr`.",5,[[["self"]],[R[2]]]],[8,R[54],E,"A trait for types parsing a `ByteStr`.",N,N],[16,"Err",E,"The type of error which can be returned from parsing.",6,N],[10,R[29],E,"Parses a `ByteStr` and returns a value of this type.",6,[[[R[2]]],[R[3]]]],[0,"io",R[0],"Utilities related to I/O.",N,N],[3,"Scanner",R[25],"Wraps a reader and tokenize its input.",N,N],[11,"new",E,"Creates a new `Scanner`.",7,[[["r"]],["self"]]],[11,"next",E,"Parses a next token splitted by whitespaces, and returns it.",7,[[["self"]],[[R[3],[R[3]]],[R[3]]]]],[11,"next_byte_str",E,"Returns a next token splitted by whitespaces.",7,[[["self"]],[[R[2]],[R[3],[R[2]]]]]],[0,"sequences",R[0],"Data structures representing a sequence.",N,N],[0,"cumulative_sum",R[6],R[4],N,N],[3,R[55],R[26],R[4],N,N],[11,"len",E,R[8],8,[[["self"]],[R[5]]]],[11,R[9],E,R[10],8,[[["self"],[R[5]],["rangeto",[R[5]]]],["m"]]],[11,"get",E,R[11],8,[[["self"],[R[5]]],["g"]]],[11,"fold",E,R[12],8,[[["self"],["range",[R[5]]],[R[5]]],["g"]]],[0,"fenwick_tree",R[6],R[7],N,N],[3,R[56],R[27],R[7],N,N],[11,"new",E,"Creates a new `FenwickTree` of the given length, filled…",9,[[[R[5]]],["self"]]],[11,"len",E,R[8],9,[[["self"]],[R[5]]]],[11,"point_append",E,"Append the given value to an element at the given index…",9,[[["self"],["m"],[R[5]]]]],[11,R[9],E,R[10],9,[[["self"],[R[5]],["rangeto",[R[5]]]],["m"]]],[11,"get",E,R[11],9,[[["self"],[R[5]]],["g"]]],[11,"replace",E,"Replaces an element at the given index with the given…",9,[[["self"],[R[5]],["g"]],["g"]]],[11,"fold",E,R[12],9,[[["self"],["range",[R[5]]],[R[5]]],["g"]]],[0,"segment_tree",R[6],R[13],N,N],[3,R[57],R[28],R[13],N,N],[3,"GetMut",E,"Structure wrapping a mutable refenrece to an element on…",N,N],[11,"new",E,"Creates a new `SegmentTree` of the given length, filled…",10,[[[R[5]]],["self"]]],[11,"len",E,R[8],10,[[["self"]],[R[5]]]],[11,"get",E,R[11],10,[[["self"],[R[5]]],["m"]]],[11,"get_mut",E,"Returns a mutable reference to an element at the given…",10,[[["self"],[R[5]]],["getmut"]]],[11,"fold",E,"Folds elements in the given range with a monoid's binary…",10,[[["self"],["range",[R[5]]],[R[5]]],["m"]]],[11,"update",E,"Updates the value using the given function.",11,[[["self"],["f"]]]],[11,R[15],R[14],E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[17],E,E,3,[[["self"]],[R[22]]]],[11,R[19],E,E,3,[[[U]],[R[3]]]],[11,R[20],E,E,3,[[],[R[3]]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[21],E,E,3,[[["self"]],[R[24]]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"],[T]]]],[11,R[17],E,E,4,[[["self"]],[R[22]]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[21],E,E,4,[[["self"]],[R[24]]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"],[T]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[17],E,E,5,[[["self"]],[R[22]]]],[11,R[19],E,E,5,[[[U]],[R[3]]]],[11,R[20],E,E,5,[[],[R[3]]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[21],E,E,5,[[["self"]],[R[24]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[17],E,E,12,[[["self"]],[R[22]]]],[11,R[19],E,E,12,[[[U]],[R[3]]]],[11,R[20],E,E,12,[[],[R[3]]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[18],E,E,12,[[["self"]],[T]]],[11,R[21],E,E,12,[[["self"]],[R[24]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[17],E,E,13,[[["self"]],[R[22]]]],[11,R[19],E,E,13,[[[U]],[R[3]]]],[11,R[20],E,E,13,[[],[R[3]]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[18],E,E,13,[[["self"]],[T]]],[11,R[21],E,E,13,[[["self"]],[R[24]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[17],E,E,14,[[["self"]],[R[22]]]],[11,R[19],E,E,14,[[[U]],[R[3]]]],[11,R[20],E,E,14,[[],[R[3]]]],[11,R[23],E,E,14,[[["self"]],[T]]],[11,R[18],E,E,14,[[["self"]],[T]]],[11,R[21],E,E,14,[[["self"]],[R[24]]]],[11,"from",R[25],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[19],E,E,7,[[[U]],[R[3]]]],[11,R[20],E,E,7,[[],[R[3]]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[21],E,E,7,[[["self"]],[R[24]]]],[11,R[15],R[26],E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[19],E,E,8,[[[U]],[R[3]]]],[11,R[20],E,E,8,[[],[R[3]]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[21],E,E,8,[[["self"]],[R[24]]]],[11,R[15],R[27],E,9,[[["self"]],[T]]],[11,R[16],E,E,9,[[["self"],[T]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[19],E,E,9,[[[U]],[R[3]]]],[11,R[20],E,E,9,[[],[R[3]]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[21],E,E,9,[[["self"]],[R[24]]]],[11,R[15],R[28],E,10,[[["self"]],[T]]],[11,R[16],E,E,10,[[["self"],[T]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[19],E,E,10,[[[U]],[R[3]]]],[11,R[20],E,E,10,[[],[R[3]]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[21],E,E,10,[[["self"]],[R[24]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[19],E,E,11,[[[U]],[R[3]]]],[11,R[20],E,E,11,[[],[R[3]]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[18],E,E,11,[[["self"]],[T]]],[11,R[21],E,E,11,[[["self"]],[R[24]]]],[11,R[29],R[14],E,3,[[[R[2]]],[R[3]]]],[11,R[29],E,E,5,[[[R[2]]],[R[3]]]],[11,"drop",R[28],E,11,[[["self"]]]],[11,"default",R[14],E,3,[[],[R[1]]]],[11,"default",E,E,5,[[],[R[30]]]],[11,R[15],E,E,4,[[["self"]],[R[30]]]],[11,"clone",E,E,3,[[["self"]],[R[1]]]],[11,"clone",E,E,5,[[["self"]],[R[30]]]],[11,"clone",R[26],E,8,[[["self"]],[R[33]]]],[11,"clone",R[27],E,9,[[["self"]],[R[34]]]],[11,"clone",R[28],E,10,[[["self"]],[R[35]]]],[11,R[32],R[14],E,3,[[["self"],[R[1]]],[["option",[R[31]]],[R[31]]]]],[11,"lt",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"le",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"gt",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"ge",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,R[32],E,E,4,[[["self"],[R[2]]],[["option",[R[31]]],[R[31]]]]],[11,"lt",E,E,4,[[["self"],[R[2]]],["bool"]]],[11,"le",E,E,4,[[["self"],[R[2]]],["bool"]]],[11,"gt",E,E,4,[[["self"],[R[2]]],["bool"]]],[11,"ge",E,E,4,[[["self"],[R[2]]],["bool"]]],[11,R[32],E,E,5,[[["self"],[R[30]]],[["option",[R[31]]],[R[31]]]]],[11,"lt",E,E,5,[[["self"],[R[30]]],["bool"]]],[11,"le",E,E,5,[[["self"],[R[30]]],["bool"]]],[11,"gt",E,E,5,[[["self"],[R[30]]],["bool"]]],[11,"ge",E,E,5,[[["self"],[R[30]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[2]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[2]]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[30]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[30]]],["bool"]]],[11,"eq",R[26],E,8,[[["self"],[R[33]]],["bool"]]],[11,"ne",E,E,8,[[["self"],[R[33]]],["bool"]]],[11,"eq",R[27],E,9,[[["self"],[R[34]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[34]]],["bool"]]],[11,"eq",R[28],E,10,[[["self"],[R[35]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[35]]],["bool"]]],[11,"from",R[14],E,5,[[[R[1]],["vec",[R[1]]]],[R[30]]]],[11,"from",R[27],"Creates a new `FenwickTree` from a `Vec`.",9,[[["vec"]],["self"]]],[11,"cmp",R[14],E,3,[[["self"],[R[1]]],[R[31]]]],[11,"cmp",E,E,4,[[["self"],[R[2]]],[R[31]]]],[11,"cmp",E,E,5,[[["self"],[R[30]]],[R[31]]]],[11,"deref",E,E,4,[[["self"]]]],[11,"deref",E,E,5,[[["self"]],[R[2]]]],[11,"deref",R[28],E,11,[[["self"]],["m"]]],[11,R[36],R[14],E,4,[[["self"]]]],[11,R[36],E,E,5,[[["self"]],[R[2]]]],[11,R[36],R[28],E,11,[[["self"]],["m"]]],[11,"hash",R[14],E,3,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"hash",E,E,5,[[["self"],["__h"]]]],[11,"hash",R[26],E,8,[[["self"],["__ht"]]]],[11,"hash",R[27],E,9,[[["self"],["__ht"]]]],[11,"hash",R[28],E,10,[[["self"],["__ht"]]]],[11,"fmt",R[14],E,3,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,4,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,5,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,12,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,14,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,13,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,3,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,4,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,5,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,12,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,14,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",E,E,13,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",R[25],E,7,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",R[26],E,8,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",R[27],E,9,[[["self"],[R[37]]],[R[3]]]],[11,"fmt",R[28],E,10,[[["self"],[R[37]]],[R[3]]]],[11,R[38],R[26],"Creates a new `CumulativeSum` from an iterator.",8,[[["i"]],["self"]]],[11,R[38],R[27],"Creates a new `FenwickTree` from an iterator.",9,[[["i"]],["self"]]],[11,R[38],R[28],E,10,[[["i"]],["self"]]],[11,R[23],R[14],E,5,[[["self"]],[R[2]]]],[11,R[18],E,E,5,[[["self"]],[R[2]]]],[11,R[39],E,E,12,[[["self"]],["str"]]],[11,R[39],E,E,14,[[["self"]],["str"]]],[11,R[39],E,E,13,[[["self"]],["str"]]],[11,R[40],R[41],R[42],0,[[["self"]],["self"]]],[11,R[43],E,R[44],0,[[["self"],["self"]]]],[11,R[45],E,R[46],0,[[["self"],["self"]]]],[11,R[47],E,R[48],1,[[["self"],["self"]]]],[11,R[49],E,R[50],1,[[["self"],["self"]]]]],"p":[[8,R[51]],[8,"Magma"],[8,"Unital"],[3,R[52]],[3,"ByteStr"],[3,R[53]],[8,R[54]],[3,"Scanner"],[3,R[55]],[3,R[56]],[3,R[57]],[3,"GetMut"],[3,R[58]],[3,R[59]],[4,R[60]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
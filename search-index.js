var searchIndex = JSON.parse('{\
"spella":{"doc":"GitHub","i":[[0,"algebra","spella","Algebra.",null,null],[3,"ModInt","spella::algebra","A ring of integers modulo n (ℤ/nℤ).",null,null],[11,"new","","Creates a new `ModInt` with the given representative.",0,[[]]],[11,"repr","","Returns the canonical representative.",0,[[]]],[11,"inverse","","Returns the multiplicative inverse if it exists.",0,[[],["option",4]]],[0,"structures","","Algebraic structures.",null,null],[8,"AbelianGroup","spella::algebra::structures","An abelian group.",null,null],[8,"AssociativeMagma","","An associative magma.",null,null],[8,"CommutativeMagma","","A commutative magma.",null,null],[8,"Group","","A group.",null,null],[8,"InvertibleMagma","","A magma whose all elements have an inverse element.",null,null],[10,"invert","","Returns an inverse element.",1,[[]]],[11,"inverse_op","","Returns `self.op(&rhs.invert())`.",1,[[]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",1,[[]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",1,[[]]],[8,"Magma","","A magma.",null,null],[10,"op","","Performs a binary operation.",2,[[]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",2,[[]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",2,[[]]],[8,"Monoid","","A monoid.",null,null],[8,"Semigroup","","A semigroup.",null,null],[8,"UnitalMagma","","A magma that has an identity element.",null,null],[10,"identity","","Returns an identity element.",3,[[]]],[0,"systems","spella::algebra","Algebraic systems.",null,null],[3,"All","spella::algebra::systems","A monoid under conjunction `&&`.",null,null],[12,"0","","",4,null],[3,"Any","","A monoid under disjunction `||`.",null,null],[12,"0","","",5,null],[3,"First","","A left zero semigroup.",null,null],[12,"0","","",6,null],[3,"Last","","A right zero semigroup.",null,null],[12,"0","","",7,null],[3,"Max","","A monoid that returns the maximum value.",null,null],[12,"0","","",8,null],[3,"Min","","A monoid that returns the minimum value.",null,null],[12,"0","","",9,null],[0,"byte","spella","Single-byte character/string types.",null,null],[3,"ByteChar","spella::byte","A single-byte character.",null,null],[12,"0","","",10,null],[3,"ParseByteCharError","","An error which can be returned when parsing a `ByteChar`.",null,null],[0,"cmp","spella","Extensions for ordering and comparison.",null,null],[8,"Bounded","spella::cmp","Trait for types that have min/max values.",null,null],[18,"MIN","","",11,null],[18,"MAX","","",11,null],[0,"constant","spella","Utilities related to constant values.",null,null],[8,"Constant","spella::constant","A trait for marker types that represents a constant value.",null,null],[10,"get","","Returns the constant value.",12,[[]]],[0,"io","spella","Utilities related to I/O.",null,null],[3,"Scanner","spella::io","Wraps a reader and tokenize its input.",null,null],[5,"run","","",null,[[["option",4]],["result",6]]],[11,"new","","Creates a new `Scanner`.",13,[[]]],[11,"next","","Returns a next token splitted by whitespaces.",13,[[],["result",6]]],[11,"parse_next","","Parses a next token splitted by whitespaces, and returns it.",13,[[],[["result",6],["result",4]]]],[0,"num","spella","Utilities related to numeric types.",null,null],[5,"gcd","spella::num","Returns the greatest common divisor.",null,[[]]],[5,"lcm","","Returns the least common multiple if it exists.",null,[[],["option",4]]],[0,"primitive","","Traits for primitive numeric types.",null,null],[8,"Int","spella::num::primitive","A trait for primitive integer types.",null,null],[18,"ZERO","","The constant value `0`.",14,null],[18,"ONE","","The constant value `1`.",14,null],[10,"from_str_radix","","",14,[[],[["result",4],["parseinterror",3]]]],[10,"count_ones","","",14,[[]]],[10,"count_zeros","","",14,[[]]],[10,"leading_zeros","","",14,[[]]],[10,"trailing_zeros","","",14,[[]]],[10,"rotate_left","","",14,[[]]],[10,"rotate_right","","",14,[[]]],[10,"swap_bytes","","",14,[[]]],[10,"reverse_bits","","",14,[[]]],[10,"checked_add","","",14,[[],["option",4]]],[10,"checked_sub","","",14,[[],["option",4]]],[10,"checked_mul","","",14,[[],["option",4]]],[10,"checked_div","","",14,[[],["option",4]]],[10,"checked_div_euclid","","",14,[[],["option",4]]],[10,"checked_rem","","",14,[[],["option",4]]],[10,"checked_rem_euclid","","",14,[[],["option",4]]],[10,"checked_neg","","",14,[[],["option",4]]],[10,"checked_shl","","",14,[[],["option",4]]],[10,"checked_shr","","",14,[[],["option",4]]],[10,"checked_pow","","",14,[[],["option",4]]],[10,"saturating_add","","",14,[[]]],[10,"saturating_sub","","",14,[[]]],[10,"saturating_mul","","",14,[[]]],[10,"saturating_pow","","",14,[[]]],[10,"wrapping_add","","",14,[[]]],[10,"wrapping_sub","","",14,[[]]],[10,"wrapping_mul","","",14,[[]]],[10,"wrapping_div","","",14,[[]]],[10,"wrapping_div_euclid","","",14,[[]]],[10,"wrapping_rem","","",14,[[]]],[10,"wrapping_rem_euclid","","",14,[[]]],[10,"wrapping_neg","","",14,[[]]],[10,"wrapping_shl","","",14,[[]]],[10,"wrapping_shr","","",14,[[]]],[10,"wrapping_pow","","",14,[[]]],[10,"overflowing_add","","",14,[[]]],[10,"overflowing_sub","","",14,[[]]],[10,"overflowing_mul","","",14,[[]]],[10,"overflowing_div","","",14,[[]]],[10,"overflowing_div_euclid","","",14,[[]]],[10,"overflowing_rem","","",14,[[]]],[10,"overflowing_rem_euclid","","",14,[[]]],[10,"overflowing_neg","","",14,[[]]],[10,"overflowing_shl","","",14,[[]]],[10,"overflowing_shr","","",14,[[]]],[10,"overflowing_pow","","",14,[[]]],[10,"pow","","",14,[[]]],[10,"div_euclid","","",14,[[]]],[10,"rem_euclid","","",14,[[]]],[8,"SignedInt","","A trait for primitive signed integer types.",null,null],[10,"checked_abs","","",15,[[],["option",4]]],[10,"wrapping_abs","","",15,[[]]],[10,"overflowing_abs","","",15,[[]]],[10,"abs","","",15,[[]]],[10,"signum","","",15,[[]]],[10,"is_positive","","",15,[[]]],[10,"is_negative","","",15,[[]]],[8,"UnsignedInt","","A trait for primitive unsigned integer types.",null,null],[10,"is_power_of_two","","",16,[[]]],[10,"next_power_of_two","","",16,[[]]],[10,"checked_next_power_of_two","","",16,[[],["option",4]]],[0,"sequences","spella","Data structures representing a sequence.",null,null],[0,"cumulative_sum","spella::sequences","A cumulative sum.",null,null],[3,"CumulativeSum","spella::sequences::cumulative_sum","A cumulative sum.",null,null],[11,"len","","Returns the length of the sequence.",17,[[]]],[11,"prefix_fold","","Folds elements in the given prefix range with a monoid\'s…",17,[[["rangeto",3]]]],[11,"get","","Returns an element at the given index.",17,[[]]],[11,"fold","","Folds elements in the given range with a group\'s binary…",17,[[["range",3]]]],[0,"fenwick_tree","spella::sequences","A fenwick tree (a.k.a. binary indexed tree).",null,null],[3,"FenwickTree","spella::sequences::fenwick_tree","A fenwick tree (a.k.a. binary indexed tree).",null,null],[11,"new","","Creates a new `FenwickTree` of the given length, filled…",18,[[]]],[11,"len","","Returns the length of the sequence.",18,[[]]],[11,"point_append","","Append the given value to an element at the given index…",18,[[]]],[11,"prefix_fold","","Folds elements in the given prefix range with a monoid\'s…",18,[[["rangeto",3]]]],[11,"get","","Returns an element at the given index.",18,[[]]],[11,"replace","","Replaces an element at the given index with the given…",18,[[]]],[11,"fold","","Folds elements in the given range with a group\'s binary…",18,[[["range",3]]]],[0,"segment_tree","spella::sequences","A segment tree.",null,null],[3,"SegmentTree","spella::sequences::segment_tree","A segment tree.",null,null],[3,"GetMut","","Structure wrapping a mutable refenrece to an element on…",null,null],[11,"new","","Creates a new `SegmentTree` of the given length, filled…",19,[[]]],[11,"len","","Returns the length of the sequence.",19,[[]]],[11,"get","","Returns an element at the given index.",19,[[]]],[11,"get_mut","","Returns a mutable reference to an element at the given…",19,[[],["getmut",3]]],[11,"fold","","Folds elements in the given range with a monoid\'s binary…",19,[[["range",3]]]],[11,"update","","Updates the value using the given function.",20,[[]]],[14,"constant","spella","Creates a marker type that represents a constant value.",null,null],[11,"from","spella::algebra","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","spella::algebra::systems","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","spella::byte","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","spella::io","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","spella::sequences::cumulative_sum","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","spella::sequences::fenwick_tree","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","spella::sequences::segment_tree","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"op","spella::algebra::systems","",4,[[]]],[11,"op","","",5,[[]]],[11,"op","","",6,[[]]],[11,"op","","",7,[[]]],[11,"op","","",8,[[]]],[11,"op","","",9,[[]]],[11,"identity","","",4,[[]]],[11,"identity","","",5,[[]]],[11,"identity","","",8,[[]]],[11,"identity","","",9,[[]]],[11,"drop","spella::sequences::segment_tree","",20,[[]]],[11,"from","spella::algebra","",0,[[]]],[11,"from","spella::sequences::fenwick_tree","Creates a new `FenwickTree` from a `Vec`.",18,[[["vec",3]]]],[11,"clone","spella::algebra","",0,[[]]],[11,"clone","spella::algebra::systems","",4,[[],["all",3]]],[11,"clone","","",5,[[],["any",3]]],[11,"clone","","",6,[[],["first",3]]],[11,"clone","","",7,[[],["last",3]]],[11,"clone","","",8,[[],["max",3]]],[11,"clone","","",9,[[],["min",3]]],[11,"clone","spella::byte","",10,[[],["bytechar",3]]],[11,"clone","","",21,[[],["parsebytecharerror",3]]],[11,"clone","spella::sequences::cumulative_sum","",17,[[],["cumulativesum",3]]],[11,"clone","spella::sequences::fenwick_tree","",18,[[],["fenwicktree",3]]],[11,"clone","spella::sequences::segment_tree","",19,[[],["segmenttree",3]]],[11,"default","spella::algebra","",0,[[]]],[11,"default","spella::algebra::systems","",4,[[],["all",3]]],[11,"default","","",5,[[],["any",3]]],[11,"default","","",6,[[],["first",3]]],[11,"default","","",7,[[],["last",3]]],[11,"default","","",8,[[],["max",3]]],[11,"default","","",9,[[],["min",3]]],[11,"default","spella::byte","",10,[[],["bytechar",3]]],[11,"cmp","spella::algebra::systems","",4,[[["all",3]],["ordering",4]]],[11,"cmp","","",5,[[["any",3]],["ordering",4]]],[11,"cmp","","",6,[[["first",3]],["ordering",4]]],[11,"cmp","","",7,[[["last",3]],["ordering",4]]],[11,"cmp","","",8,[[["max",3]],["ordering",4]]],[11,"cmp","","",9,[[["min",3]],["ordering",4]]],[11,"cmp","spella::byte","",10,[[["bytechar",3]],["ordering",4]]],[11,"eq","spella::algebra","",0,[[]]],[11,"eq","spella::algebra::systems","",4,[[["all",3]]]],[11,"ne","","",4,[[["all",3]]]],[11,"eq","","",5,[[["any",3]]]],[11,"ne","","",5,[[["any",3]]]],[11,"eq","","",6,[[["first",3]]]],[11,"ne","","",6,[[["first",3]]]],[11,"eq","","",7,[[["last",3]]]],[11,"ne","","",7,[[["last",3]]]],[11,"eq","","",8,[[["max",3]]]],[11,"ne","","",8,[[["max",3]]]],[11,"eq","","",9,[[["min",3]]]],[11,"ne","","",9,[[["min",3]]]],[11,"eq","spella::byte","",10,[[["bytechar",3]]]],[11,"ne","","",10,[[["bytechar",3]]]],[11,"eq","","",21,[[["parsebytecharerror",3]]]],[11,"ne","","",21,[[["parsebytecharerror",3]]]],[11,"eq","spella::sequences::cumulative_sum","",17,[[["cumulativesum",3]]]],[11,"ne","","",17,[[["cumulativesum",3]]]],[11,"eq","spella::sequences::fenwick_tree","",18,[[["fenwicktree",3]]]],[11,"ne","","",18,[[["fenwicktree",3]]]],[11,"eq","spella::sequences::segment_tree","",19,[[["segmenttree",3]]]],[11,"ne","","",19,[[["segmenttree",3]]]],[11,"partial_cmp","spella::algebra::systems","",4,[[["all",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["all",3]]]],[11,"le","","",4,[[["all",3]]]],[11,"gt","","",4,[[["all",3]]]],[11,"ge","","",4,[[["all",3]]]],[11,"partial_cmp","","",5,[[["any",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["any",3]]]],[11,"le","","",5,[[["any",3]]]],[11,"gt","","",5,[[["any",3]]]],[11,"ge","","",5,[[["any",3]]]],[11,"partial_cmp","","",6,[[["first",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["first",3]]]],[11,"le","","",6,[[["first",3]]]],[11,"gt","","",6,[[["first",3]]]],[11,"ge","","",6,[[["first",3]]]],[11,"partial_cmp","","",7,[[["last",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["last",3]]]],[11,"le","","",7,[[["last",3]]]],[11,"gt","","",7,[[["last",3]]]],[11,"ge","","",7,[[["last",3]]]],[11,"partial_cmp","","",8,[[["max",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["max",3]]]],[11,"le","","",8,[[["max",3]]]],[11,"gt","","",8,[[["max",3]]]],[11,"ge","","",8,[[["max",3]]]],[11,"partial_cmp","","",9,[[["min",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["min",3]]]],[11,"le","","",9,[[["min",3]]]],[11,"gt","","",9,[[["min",3]]]],[11,"ge","","",9,[[["min",3]]]],[11,"partial_cmp","spella::byte","",10,[[["bytechar",3]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["bytechar",3]]]],[11,"le","","",10,[[["bytechar",3]]]],[11,"gt","","",10,[[["bytechar",3]]]],[11,"ge","","",10,[[["bytechar",3]]]],[11,"deref","spella::sequences::segment_tree","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"fmt","spella::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","spella::algebra::systems","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","spella::byte","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","spella::io","",13,[[["formatter",3]],["result",6]]],[11,"fmt","spella::sequences::cumulative_sum","",17,[[["formatter",3]],["result",6]]],[11,"fmt","spella::sequences::fenwick_tree","",18,[[["formatter",3]],["result",6]]],[11,"fmt","spella::sequences::segment_tree","",19,[[["formatter",3]],["result",6]]],[11,"fmt","spella::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","spella::byte","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"div","spella::algebra","",0,[[]]],[11,"sub","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"hash","spella::algebra::systems","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","spella::byte","",10,[[]]],[11,"hash","","",21,[[]]],[11,"hash","spella::sequences::cumulative_sum","",17,[[]]],[11,"hash","spella::sequences::fenwick_tree","",18,[[]]],[11,"hash","spella::sequences::segment_tree","",19,[[]]],[11,"from_iter","spella::sequences::cumulative_sum","Creates a new `CumulativeSum` from an iterator.",17,[[]]],[11,"from_iter","spella::sequences::fenwick_tree","Creates a new `FenwickTree` from an iterator.",18,[[]]],[11,"from_iter","spella::sequences::segment_tree","",19,[[]]],[11,"product","spella::algebra","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"from_str","spella::byte","",10,[[],[["bytechar",3],["parsebytecharerror",3],["result",4]]]],[11,"inverse_op","spella::algebra::structures","Returns `self.op(&rhs.invert())`.",1,[[]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",1,[[]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",1,[[]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",2,[[]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",2,[[]]],[18,"MIN","spella::cmp","",11,null],[18,"MAX","","",11,null],[18,"ZERO","spella::num::primitive","The constant value `0`.",14,null],[18,"ONE","","The constant value `1`.",14,null]],"p":[[3,"ModInt"],[8,"InvertibleMagma"],[8,"Magma"],[8,"UnitalMagma"],[3,"All"],[3,"Any"],[3,"First"],[3,"Last"],[3,"Max"],[3,"Min"],[3,"ByteChar"],[8,"Bounded"],[8,"Constant"],[3,"Scanner"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[3,"CumulativeSum"],[3,"FenwickTree"],[3,"SegmentTree"],[3,"GetMut"],[3,"ParseByteCharError"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
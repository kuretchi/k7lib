var searchIndex = JSON.parse('{\
"k7lib":{"doc":"My own competitive programming library for Rust.","i":[[0,"algebra","k7lib","Algebra.",null,null],[3,"ModInt","k7lib::algebra","A ring of integers modulo $n$ ($\\\\mathbb{Z}/n\\\\mathbb{Z}$).",null,null],[5,"pow","","Raises `x` to the power of `n`, using exponentiation by…",null,[[]]],[11,"new","","Creates a new `ModInt` with the given representative.",0,[[]]],[11,"repr","","Returns the canonical representative.",0,[[]]],[11,"recip","","Returns the multiplicative inverse if it exists.",0,[[],["option",4]]],[0,"structures","","Algebraic structures.",null,null],[3,"All","k7lib::algebra::structures","A monoid under conjunction `&&`.",null,null],[12,"0","","",1,null],[3,"Any","","A monoid under disjunction `||`.",null,null],[12,"0","","",2,null],[3,"Concat","","A monoid under string concatenation.",null,null],[12,"0","","",3,null],[3,"First","","A left zero semigroup.",null,null],[12,"0","","",4,null],[3,"Last","","A right zero semigroup.",null,null],[12,"0","","",5,null],[3,"Max","","A monoid that returns the maximum value.",null,null],[12,"0","","",6,null],[3,"Min","","A monoid that returns the minimum value.",null,null],[12,"0","","",7,null],[3,"Product","","A monoid under semiring multiplication.",null,null],[12,"0","","",8,null],[3,"Sum","","A commutative monoid under semiring addition.",null,null],[12,"0","","",9,null],[8,"CommutativeSemigroup","","A commutative semigroup.",null,null],[8,"CommutativeSemiring","","A commutative semiring.",null,null],[8,"Group","","A group.",null,null],[10,"invert","","Returns an inverse element.",10,[[]]],[11,"inverse_op","","Returns `self.op(&rhs.invert())`.",10,[[]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",10,[[]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",10,[[]]],[8,"Monoid","","A monoid.",null,null],[10,"identity","","Returns an identity element.",11,[[]]],[8,"Ring","","A ring.",null,null],[10,"neg","","Returns an additive inverse.",12,[[]]],[8,"Semigroup","","A semigroup.",null,null],[10,"op","","Performs a binary operation.",13,[[]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",13,[[]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",13,[[]]],[8,"Semiring","","A semiring.",null,null],[10,"add","","Performs addition.",14,[[]]],[10,"mul","","Performs multiplication.",14,[[]]],[10,"zero","","Returns the additive identity.",14,[[]]],[10,"one","","Returns the multiplicative identity.",14,[[]]],[0,"byte","k7lib","Single-byte character/string types.",null,null],[3,"ByteChar","k7lib::byte","A single-byte character.",null,null],[12,"0","","",15,null],[3,"ParseByteCharError","","An error which can be returned when parsing a `ByteChar`.",null,null],[0,"cmp","k7lib","Extensions for ordering and comparison.",null,null],[8,"Bounded","k7lib::cmp","Trait for types that have min/max values.",null,null],[18,"MIN","","",16,null],[18,"MAX","","",16,null],[0,"constant","k7lib","Utilities related to constant values.",null,null],[8,"Constant","k7lib::constant","A trait for marker types that represents a constant value.",null,null],[10,"get","","Returns the constant value.",17,[[]]],[0,"disjoint_sets","k7lib","Disjoint-set data structures (a.k.a. union-find data…",null,null],[3,"QuickFind","k7lib::disjoint_sets","A disjoint-set data structure based on the weighted…",null,null],[3,"QuickUnion","","A disjoint-set data structure based on the weighted…",null,null],[11,"new","","Creates a new `QuickFind` with the given number of elements.",18,[[]]],[11,"len","","Returns the total number of elements that belong to…",18,[[]]],[11,"sets_len","","Returns the number of disjoint sets.",18,[[]]],[11,"find","","Returns the representative of the set that the given…",18,[[]]],[11,"unite","","Unites two disjoint sets that the given elements belong to…",18,[[]]],[11,"belong_to_same_set","","Returns `true` iff the given elements belong to the same…",18,[[]]],[11,"set","","Returns the slice of elements that belong to the same set…",18,[[]]],[11,"new","","Creates a new `QuickUnion` with the given number of…",19,[[]]],[11,"len","","Returns the total number of elements that belong to…",19,[[]]],[11,"sets_len","","Returns the number of disjoint sets.",19,[[]]],[11,"find","","Returns the representative of the set that the given…",19,[[]]],[11,"unite","","Unites two disjoint sets that the given elements belong to…",19,[[]]],[11,"belong_to_same_set","","Returns `true` iff the given elements belong to the same…",19,[[]]],[11,"set_len","","Returns the number of elements that belong to the same set…",19,[[]]],[0,"io","k7lib","Utilities related to I/O.",null,null],[3,"Scanner","k7lib::io","Wraps a reader and tokenizes its input.",null,null],[5,"run","","",null,[[["option",4]],["result",6]]],[11,"new","","Creates a new `Scanner`.",20,[[]]],[11,"next","","Returns a next token splitted by whitespaces.",20,[[],["result",6]]],[11,"next_line","","Returns a whole string slice before the next newline…",20,[[],["result",6]]],[11,"parse_next","","Parses a next token splitted by whitespaces, and returns it.",20,[[],[["result",4],["result",6]]]],[0,"num","k7lib","Utilities related to numeric types.",null,null],[5,"gcd","k7lib::num","Returns the greatest common divisor.",null,[[]]],[5,"lcm","","Returns the least common multiple.",null,[[]]],[0,"primitive","","Traits for primitive numeric types.",null,null],[8,"Int","k7lib::num::primitive","A trait for primitive integer types.",null,null],[18,"ZERO","","The constant value `0`.",21,null],[18,"ONE","","The constant value `1`.",21,null],[10,"from_str_radix","","",21,[[],[["result",4],["parseinterror",3]]]],[10,"count_ones","","",21,[[]]],[10,"count_zeros","","",21,[[]]],[10,"leading_zeros","","",21,[[]]],[10,"trailing_zeros","","",21,[[]]],[10,"rotate_left","","",21,[[]]],[10,"rotate_right","","",21,[[]]],[10,"swap_bytes","","",21,[[]]],[10,"reverse_bits","","",21,[[]]],[10,"checked_add","","",21,[[],["option",4]]],[10,"checked_sub","","",21,[[],["option",4]]],[10,"checked_mul","","",21,[[],["option",4]]],[10,"checked_div","","",21,[[],["option",4]]],[10,"checked_div_euclid","","",21,[[],["option",4]]],[10,"checked_rem","","",21,[[],["option",4]]],[10,"checked_rem_euclid","","",21,[[],["option",4]]],[10,"checked_neg","","",21,[[],["option",4]]],[10,"checked_shl","","",21,[[],["option",4]]],[10,"checked_shr","","",21,[[],["option",4]]],[10,"checked_pow","","",21,[[],["option",4]]],[10,"saturating_add","","",21,[[]]],[10,"saturating_sub","","",21,[[]]],[10,"saturating_mul","","",21,[[]]],[10,"saturating_pow","","",21,[[]]],[10,"wrapping_add","","",21,[[]]],[10,"wrapping_sub","","",21,[[]]],[10,"wrapping_mul","","",21,[[]]],[10,"wrapping_div","","",21,[[]]],[10,"wrapping_div_euclid","","",21,[[]]],[10,"wrapping_rem","","",21,[[]]],[10,"wrapping_rem_euclid","","",21,[[]]],[10,"wrapping_neg","","",21,[[]]],[10,"wrapping_shl","","",21,[[]]],[10,"wrapping_shr","","",21,[[]]],[10,"wrapping_pow","","",21,[[]]],[10,"overflowing_add","","",21,[[]]],[10,"overflowing_sub","","",21,[[]]],[10,"overflowing_mul","","",21,[[]]],[10,"overflowing_div","","",21,[[]]],[10,"overflowing_div_euclid","","",21,[[]]],[10,"overflowing_rem","","",21,[[]]],[10,"overflowing_rem_euclid","","",21,[[]]],[10,"overflowing_neg","","",21,[[]]],[10,"overflowing_shl","","",21,[[]]],[10,"overflowing_shr","","",21,[[]]],[10,"overflowing_pow","","",21,[[]]],[10,"pow","","",21,[[]]],[10,"div_euclid","","",21,[[]]],[10,"rem_euclid","","",21,[[]]],[8,"SignedInt","","A trait for primitive signed integer types.",null,null],[10,"checked_abs","","",22,[[],["option",4]]],[10,"wrapping_abs","","",22,[[]]],[10,"overflowing_abs","","",22,[[]]],[10,"abs","","",22,[[]]],[10,"signum","","",22,[[]]],[10,"is_positive","","",22,[[]]],[10,"is_negative","","",22,[[]]],[8,"UnsignedInt","","A trait for primitive unsigned integer types.",null,null],[10,"is_power_of_two","","",23,[[]]],[10,"next_power_of_two","","",23,[[]]],[10,"checked_next_power_of_two","","",23,[[],["option",4]]],[0,"sequences","k7lib","Data structures representing a sequence.",null,null],[0,"cumulative_sum","k7lib::sequences","A cumulative sum.",null,null],[3,"CumulativeSum","k7lib::sequences::cumulative_sum","A cumulative sum.",null,null],[11,"new","","Creates an empty sequence.",24,[[]]],[11,"push","","Appends an element to the back of the sequence.",24,[[]]],[11,"len","","Returns the length of the sequence.",24,[[]]],[11,"prefix_sum","","Folds elements in the given prefix range with a monoid\'s…",24,[[["rangeto",3]]]],[11,"point_get","","Returns an element at the given index.",24,[[]]],[11,"range_sum","","Folds elements in the given range with a group\'s binary…",24,[[["range",3]]]],[0,"fenwick_tree","k7lib::sequences","A fenwick tree (a.k.a. binary indexed tree).",null,null],[3,"FenwickTree","k7lib::sequences::fenwick_tree","A fenwick tree (a.k.a. binary indexed tree).",null,null],[11,"new","","Creates a new `FenwickTree` of the given length, filled…",25,[[]]],[11,"len","","Returns the length of the sequence.",25,[[]]],[11,"point_append","","Append the given value to an element at the given index…",25,[[]]],[11,"prefix_sum","","Folds elements in the given prefix range with a monoid\'s…",25,[[["rangeto",3]]]],[11,"point_get","","Returns an element at the given index.",25,[[]]],[11,"point_set","","Replaces an element at the given index with the given…",25,[[]]],[11,"range_sum","","Folds elements in the given range with a group\'s binary…",25,[[["range",3]]]],[0,"segment_tree","k7lib::sequences","A segment tree.",null,null],[3,"SegmentTree","k7lib::sequences::segment_tree","A segment tree.",null,null],[3,"PointGetMut","","Structure wrapping a mutable refenrece to an element on…",null,null],[11,"new","","Creates a new `SegmentTree` of the given length, filled…",26,[[]]],[11,"len","","Returns the length of the sequence.",26,[[]]],[11,"point_get","","Returns an element at the given index.",26,[[]]],[11,"point_get_mut","","Returns a mutable reference to an element at the given…",26,[[],["pointgetmut",3]]],[11,"range_sum","","Folds elements in the given range with a monoid\'s binary…",26,[[["range",3]]]],[11,"update","","Updates the value using the given function.",27,[[]]],[0,"string","k7lib","Algorithms and data structures for processing strings.",null,null],[3,"RunLengthEncode","k7lib::string","An iterator created by [`run_length_encode`].",null,null],[5,"inversion_number","","Calculates the inversion number.",null,[[]]],[5,"next_permutation","","Permutes the slice into the next greater permutation in…",null,[[]]],[5,"next_permutation_by","","Permutes the slice into the next greater permutation in…",null,[[]]],[5,"next_permutation_by_key","","Permutes the slice into the next greater permutation in…",null,[[]]],[5,"run_length_encode","","Creates a run-length encoded iterator of the given iterator.",null,[[],["runlengthencode",3]]],[14,"constant","k7lib","Creates a marker type that represents a constant value.",null,null],[11,"from","k7lib::algebra","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","k7lib::algebra::structures","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","k7lib::byte","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","k7lib::disjoint_sets","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","k7lib::io","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","k7lib::sequences::cumulative_sum","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","k7lib::sequences::fenwick_tree","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","k7lib::sequences::segment_tree","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","k7lib::string","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"invert","k7lib::algebra::structures","",9,[[]]],[11,"identity","","",1,[[]]],[11,"identity","","",2,[[]]],[11,"identity","","",3,[[]]],[11,"identity","","",6,[[]]],[11,"identity","","",7,[[]]],[11,"identity","","",8,[[]]],[11,"identity","","",9,[[]]],[11,"neg","k7lib::algebra","",0,[[]]],[11,"op","k7lib::algebra::structures","",1,[[]]],[11,"op","","",2,[[]]],[11,"op","","",3,[[]]],[11,"op","","",4,[[]]],[11,"op","","",5,[[]]],[11,"op","","",6,[[]]],[11,"op","","",7,[[]]],[11,"op","","",8,[[]]],[11,"op","","",9,[[]]],[11,"add","k7lib::algebra","",0,[[]]],[11,"mul","","",0,[[]]],[11,"zero","","",0,[[]]],[11,"one","","",0,[[]]],[11,"drop","k7lib::sequences::segment_tree","",27,[[]]],[11,"from","k7lib::algebra","",0,[[]]],[11,"from","k7lib::sequences::fenwick_tree","Creates a new `FenwickTree` from a `Vec`.",25,[[["vec",3]]]],[11,"next","k7lib::string","",29,[[],["option",4]]],[11,"size_hint","","",29,[[]]],[11,"clone","k7lib::algebra","",0,[[]]],[11,"clone","k7lib::algebra::structures","",1,[[],["all",3]]],[11,"clone","","",2,[[],["any",3]]],[11,"clone","","",3,[[],["concat",3]]],[11,"clone","","",4,[[],["first",3]]],[11,"clone","","",5,[[],["last",3]]],[11,"clone","","",6,[[],["max",3]]],[11,"clone","","",7,[[],["min",3]]],[11,"clone","","",8,[[],["product",3]]],[11,"clone","","",9,[[],["sum",3]]],[11,"clone","k7lib::byte","",15,[[],["bytechar",3]]],[11,"clone","","",28,[[],["parsebytecharerror",3]]],[11,"clone","k7lib::disjoint_sets","",18,[[],["quickfind",3]]],[11,"clone","","",19,[[],["quickunion",3]]],[11,"clone","k7lib::sequences::cumulative_sum","",24,[[],["cumulativesum",3]]],[11,"clone","k7lib::sequences::fenwick_tree","",25,[[],["fenwicktree",3]]],[11,"clone","k7lib::sequences::segment_tree","",26,[[],["segmenttree",3]]],[11,"clone","k7lib::string","",29,[[],["runlengthencode",3]]],[11,"default","k7lib::algebra","",0,[[]]],[11,"default","k7lib::algebra::structures","",1,[[],["all",3]]],[11,"default","","",2,[[],["any",3]]],[11,"default","","",3,[[],["concat",3]]],[11,"default","","",4,[[],["first",3]]],[11,"default","","",5,[[],["last",3]]],[11,"default","","",6,[[],["max",3]]],[11,"default","","",7,[[],["min",3]]],[11,"default","","",8,[[],["product",3]]],[11,"default","","",9,[[],["sum",3]]],[11,"default","k7lib::byte","",15,[[],["bytechar",3]]],[11,"cmp","k7lib::algebra::structures","",1,[[["all",3]],["ordering",4]]],[11,"cmp","","",2,[[["any",3]],["ordering",4]]],[11,"cmp","","",3,[[["concat",3]],["ordering",4]]],[11,"cmp","","",4,[[["first",3]],["ordering",4]]],[11,"cmp","","",5,[[["last",3]],["ordering",4]]],[11,"cmp","","",6,[[["max",3]],["ordering",4]]],[11,"cmp","","",7,[[["min",3]],["ordering",4]]],[11,"cmp","","",8,[[["product",3]],["ordering",4]]],[11,"cmp","","",9,[[["sum",3]],["ordering",4]]],[11,"cmp","k7lib::byte","",15,[[["bytechar",3]],["ordering",4]]],[11,"eq","k7lib::algebra","",0,[[]]],[11,"eq","k7lib::algebra::structures","",1,[[["all",3]]]],[11,"ne","","",1,[[["all",3]]]],[11,"eq","","",2,[[["any",3]]]],[11,"ne","","",2,[[["any",3]]]],[11,"eq","","",3,[[["concat",3]]]],[11,"ne","","",3,[[["concat",3]]]],[11,"eq","","",4,[[["first",3]]]],[11,"ne","","",4,[[["first",3]]]],[11,"eq","","",5,[[["last",3]]]],[11,"ne","","",5,[[["last",3]]]],[11,"eq","","",6,[[["max",3]]]],[11,"ne","","",6,[[["max",3]]]],[11,"eq","","",7,[[["min",3]]]],[11,"ne","","",7,[[["min",3]]]],[11,"eq","","",8,[[["product",3]]]],[11,"ne","","",8,[[["product",3]]]],[11,"eq","","",9,[[["sum",3]]]],[11,"ne","","",9,[[["sum",3]]]],[11,"eq","k7lib::byte","",15,[[["bytechar",3]]]],[11,"ne","","",15,[[["bytechar",3]]]],[11,"eq","","",28,[[["parsebytecharerror",3]]]],[11,"ne","","",28,[[["parsebytecharerror",3]]]],[11,"eq","k7lib::sequences::cumulative_sum","",24,[[["cumulativesum",3]]]],[11,"ne","","",24,[[["cumulativesum",3]]]],[11,"eq","k7lib::sequences::fenwick_tree","",25,[[["fenwicktree",3]]]],[11,"ne","","",25,[[["fenwicktree",3]]]],[11,"eq","k7lib::sequences::segment_tree","",26,[[["segmenttree",3]]]],[11,"ne","","",26,[[["segmenttree",3]]]],[11,"partial_cmp","k7lib::algebra::structures","",1,[[["all",3]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["all",3]]]],[11,"le","","",1,[[["all",3]]]],[11,"gt","","",1,[[["all",3]]]],[11,"ge","","",1,[[["all",3]]]],[11,"partial_cmp","","",2,[[["any",3]],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[["any",3]]]],[11,"le","","",2,[[["any",3]]]],[11,"gt","","",2,[[["any",3]]]],[11,"ge","","",2,[[["any",3]]]],[11,"partial_cmp","","",3,[[["concat",3]],[["ordering",4],["option",4]]]],[11,"lt","","",3,[[["concat",3]]]],[11,"le","","",3,[[["concat",3]]]],[11,"gt","","",3,[[["concat",3]]]],[11,"ge","","",3,[[["concat",3]]]],[11,"partial_cmp","","",4,[[["first",3]],[["ordering",4],["option",4]]]],[11,"lt","","",4,[[["first",3]]]],[11,"le","","",4,[[["first",3]]]],[11,"gt","","",4,[[["first",3]]]],[11,"ge","","",4,[[["first",3]]]],[11,"partial_cmp","","",5,[[["last",3]],[["ordering",4],["option",4]]]],[11,"lt","","",5,[[["last",3]]]],[11,"le","","",5,[[["last",3]]]],[11,"gt","","",5,[[["last",3]]]],[11,"ge","","",5,[[["last",3]]]],[11,"partial_cmp","","",6,[[["max",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["max",3]]]],[11,"le","","",6,[[["max",3]]]],[11,"gt","","",6,[[["max",3]]]],[11,"ge","","",6,[[["max",3]]]],[11,"partial_cmp","","",7,[[["min",3]],[["ordering",4],["option",4]]]],[11,"lt","","",7,[[["min",3]]]],[11,"le","","",7,[[["min",3]]]],[11,"gt","","",7,[[["min",3]]]],[11,"ge","","",7,[[["min",3]]]],[11,"partial_cmp","","",8,[[["product",3]],[["ordering",4],["option",4]]]],[11,"lt","","",8,[[["product",3]]]],[11,"le","","",8,[[["product",3]]]],[11,"gt","","",8,[[["product",3]]]],[11,"ge","","",8,[[["product",3]]]],[11,"partial_cmp","","",9,[[["sum",3]],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[["sum",3]]]],[11,"le","","",9,[[["sum",3]]]],[11,"gt","","",9,[[["sum",3]]]],[11,"ge","","",9,[[["sum",3]]]],[11,"partial_cmp","k7lib::byte","",15,[[["bytechar",3]],[["ordering",4],["option",4]]]],[11,"lt","","",15,[[["bytechar",3]]]],[11,"le","","",15,[[["bytechar",3]]]],[11,"gt","","",15,[[["bytechar",3]]]],[11,"ge","","",15,[[["bytechar",3]]]],[11,"deref","k7lib::sequences::segment_tree","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"fmt","k7lib::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::algebra::structures","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::byte","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::disjoint_sets","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::io","",20,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::sequences::cumulative_sum","",24,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::sequences::fenwick_tree","",25,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::sequences::segment_tree","",26,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::string","",29,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","k7lib::byte","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"div","k7lib::algebra","",0,[[]]],[11,"sub","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"hash","k7lib::algebra::structures","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","k7lib::byte","",15,[[]]],[11,"hash","","",28,[[]]],[11,"hash","k7lib::sequences::cumulative_sum","",24,[[]]],[11,"hash","k7lib::sequences::fenwick_tree","",25,[[]]],[11,"hash","k7lib::sequences::segment_tree","",26,[[]]],[11,"from_str","k7lib::byte","",15,[[],[["result",4],["parsebytecharerror",3],["bytechar",3]]]],[11,"from_iter","k7lib::sequences::cumulative_sum","Creates a new `CumulativeSum` from an iterator.",24,[[]]],[11,"from_iter","k7lib::sequences::fenwick_tree","Creates a new `FenwickTree` from an iterator.",25,[[]]],[11,"from_iter","k7lib::sequences::segment_tree","",26,[[]]],[11,"sum","k7lib::algebra","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"inverse_op","k7lib::algebra::structures","Returns `self.op(&rhs.invert())`.",10,[[]]],[11,"inverse_op_assign_right","","Assigns `self.inverse_op(rhs)` to `self`.",10,[[]]],[11,"inverse_op_assign_left","","Assigns `lhs.inverse_op(self)` to `self`.",10,[[]]],[11,"op_assign_right","","Assigns `self.op(rhs)` to `self`.",13,[[]]],[11,"op_assign_left","","Assigns `lhs.op(self)` to `self`.",13,[[]]],[18,"MIN","k7lib::cmp","",16,null],[18,"MAX","","",16,null],[18,"ZERO","k7lib::num::primitive","The constant value `0`.",21,null],[18,"ONE","","The constant value `1`.",21,null]],"p":[[3,"ModInt"],[3,"All"],[3,"Any"],[3,"Concat"],[3,"First"],[3,"Last"],[3,"Max"],[3,"Min"],[3,"Product"],[3,"Sum"],[8,"Group"],[8,"Monoid"],[8,"Ring"],[8,"Semigroup"],[8,"Semiring"],[3,"ByteChar"],[8,"Bounded"],[8,"Constant"],[3,"QuickFind"],[3,"QuickUnion"],[3,"Scanner"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[3,"CumulativeSum"],[3,"FenwickTree"],[3,"SegmentTree"],[3,"PointGetMut"],[3,"ParseByteCharError"],[3,"RunLengthEncode"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
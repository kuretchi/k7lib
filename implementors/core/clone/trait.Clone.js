(function() {var implementors = {};
implementors["spella"] = [{"text":"impl&lt;Int, Mod&gt; Clone for ModInt&lt;Int, Mod&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Int: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for All","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for First&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Last&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Max&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Min&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Product&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Sum&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ByteChar","synthetic":false,"types":[]},{"text":"impl Clone for ParseByteCharError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CumulativeSum&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FenwickTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SegmentTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for RunLengthEncode&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
(function() {var implementors = {};
implementors["spella"] = [{"text":"impl&lt;T, Int, Mod:&nbsp;<a class=\"trait\" href=\"spella/constant/trait.Constant.html\" title=\"trait spella::constant::Constant\">Constant</a>&lt;Int&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"spella/algebra/struct.ModInt.html\" title=\"struct spella::algebra::ModInt\">ModInt</a>&lt;Int, Mod&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"spella/num/primitive/trait.Int.html\" title=\"trait spella::num::primitive::Int\">PrimInt</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Int&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Int: <a class=\"trait\" href=\"spella/num/primitive/trait.UnsignedInt.html\" title=\"trait spella::num::primitive::UnsignedInt\">PrimUint</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":["spella::algebra::mod_int::ModInt"]},{"text":"impl&lt;M:&nbsp;<a class=\"trait\" href=\"spella/algebra/structures/trait.Monoid.html\" title=\"trait spella::algebra::structures::Monoid\">Monoid</a> + <a class=\"trait\" href=\"spella/algebra/structures/trait.CommutativeMagma.html\" title=\"trait spella::algebra::structures::CommutativeMagma\">CommutativeMagma</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"spella/sequences/fenwick_tree/struct.FenwickTree.html\" title=\"struct spella::sequences::fenwick_tree::FenwickTree\">FenwickTree</a>&lt;M&gt;","synthetic":false,"types":["spella::sequences::fenwick_tree::FenwickTree"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
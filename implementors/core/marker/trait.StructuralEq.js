(function() {var implementors = {};
implementors["spella"] = [{"text":"impl StructuralEq for All","synthetic":false,"types":[]},{"text":"impl StructuralEq for Any","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for First&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for Last&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for Max&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for Min&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for Product&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for Sum&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl StructuralEq for ByteChar","synthetic":false,"types":[]},{"text":"impl StructuralEq for ParseByteCharError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for CumulativeSum&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for FenwickTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralEq for SegmentTree&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()